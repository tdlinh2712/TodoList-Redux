{"version":3,"sources":["reducer/index.js","reducer/reducer.js","store/index.js","config/localStorage.js","components/Todo.js","actions/action.js","components/AddTodoForm.js","components/App.js","serviceWorker.js","index.js"],"names":["combineReducers","reducer","state","notCompleted","completed","userId","v4","action","type","result","payload","id","newTodo","content","newNotCompletedList","index","listToDelete","afterDeleteTodo","map","todo","i","todoID","splice","listToRemove","listToAdd","ind","newCompleteStatus","editIndex","completeStatus","newContent","listToEdit","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","subscribe","throttle","stringify","setItem","saveState","getState","useStyles","makeStyles","cardContainer","margin","position","maxWidth","wordWrap","EditIcon","right","bottom","opacity","DeleteIcon","CompleteIcon","color","Content","marginTop","marginBottom","CompletedContent","textDecoration","EditForm","resize","overflow","outline","border","EditFormContainer","width","EditFormCard","minHeight","padding","SaveButton","connect","dispatch","classes","useState","isEditing","setIsEditing","todoText","setText","handleDeleteTodo","deleteTodo","handleSetCompleted","setComplete","handleUserInput","e","target","value","handleEditTodo","editTodo","className","Card","TextareaAutosize","aria-label","rowsMin","autoFocus","onChange","onBlur","Button","variant","onMouseDown","CardContent","IconButton","onClick","Typography","gutterBottom","theme","spacing","todoContent","setTodoContent","TextField","placeholder","Fab","size","App","event","props","simpleAction","this","console","log","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.004cce8b.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport reducer from './reducer';\nexport default combineReducers({\n reducer\n});\n","import {v4} from 'node-uuid';\n\nconst testState = {\n  notCompleted:[\n    {id:\"0\", content:\"sleep\"},\n    {id:\"1\", content:\"study\"},\n    {id:\"2\", content:\"eat\"},\n  ],\n  completed: [\n    {id:\"3\", content:\"sleep\"},\n    {id:\"4\", content:\"study\"},\n    {id:\"5\", content:\"eat\"},\n  ]\n}\n\nconst findIndex = (list,ID) => {\n  for( var i=0;i<list.length;i++) {\n    if(list[i].id===ID) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport default (state = {notCompleted:[],completed:[],userId: v4()}, action) => {\n switch (action.type) {\n  case 'SIMPLE_ACTION':\n   return {\n    result: action.payload\n   }\n  case 'ADD_TODO':\n    const id = v4();\n    const newTodo = {id:id,content:action.payload};\n    const newNotCompletedList = [...state.notCompleted,newTodo];\n    return {...state,notCompleted:newNotCompletedList};\n  case 'DELETE_TODO':\n    let index;\n    //find list to delete\n    let listToDelete = action.payload.completed ? state.completed : state.notCompleted;\n    let afterDeleteTodo = listToDelete.map((todo,i) => {\n      if(todo.id===action.payload.todoID) {\n        index=i;\n      }\n      return todo;\n    });\n    afterDeleteTodo.splice(index,1);\n    if(action.payload.completed) {\n      return {...state,completed:afterDeleteTodo};\n    } else {\n      return {...state,notCompleted:afterDeleteTodo};\n    }\n\n  case 'SET_COMPLETE':\n  let listToRemove,listToAdd;\n  if(action.payload.newCompleteStatus) {\n    listToRemove = state.notCompleted;\n    listToAdd = state.completed;\n  } else {\n    listToRemove = state.completed;\n    listToAdd = state.notCompleted;\n  }\n  let ind;\n  listToRemove = listToRemove.map((todo,i)=> {\n    if(todo.id===action.payload.todoID) {\n      ind=i;\n    }\n    return todo;\n  })\n  let todo = listToRemove.splice(ind,1);\n  listToAdd = [...listToAdd,todo[0]]\n  if(action.payload.newCompleteStatus) {\n    return {...state,completed:listToAdd,notCompleted:listToRemove};\n  } else {\n    return {...state,completed:listToRemove,notCompleted:listToAdd};\n  }\n\n  case 'EDIT_TODO':\n  const {todoID,completeStatus,newContent} = action.payload;\n  let listToEdit = state.notCompleted;\n  if(completeStatus) {\n    listToEdit = state.completed;\n  }\n  let editIndex;\n  listToEdit = listToEdit.map((todo,i) => {\n    if(todo.id===todoID) {\n      editIndex=i;\n    }\n    return todo;\n  })\n  listToEdit[editIndex].content = newContent;\n\n  if(!completeStatus) {\n    return {...state,notCompleted:listToEdit};\n  } else {\n    return {...state,completed:listToEdit};\n  }\n  default:\n   return state\n }\n}\n","import {createStore, applyMiddleware} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from '../reducer';\nimport {loadState,saveState} from '../config/localStorage';\nimport throttle from 'lodash/throttle';\n\nconst persistedState = loadState();\n//const store = createStore(rootReducer,applyMiddleware(thunkMiddleware));\n\nexport const store = createStore(rootReducer,persistedState, applyMiddleware(thunkMiddleware))\n//export default store;\nstore.subscribe(throttle(()=> {\n  saveState(store.getState());\n},1000));\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if(serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n}\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state',serializedState);\n  } catch (err) {\n\n  }\n}\n","import React, { Component, useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {deleteTodo, setComplete,editTodo} from '../actions/action';\nimport { connect } from 'react-redux';\nimport CheckCircleOutlineRoundedIcon from '@material-ui/icons/CheckCircleOutlineRounded';\nimport CheckCircleRoundedIcon from '@material-ui/icons/CheckCircleRounded';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport Button from '@material-ui/core/Button';\n\n\nconst useStyles = makeStyles({\n  cardContainer: {\n    margin: '0 0 8px 0',\n    position: 'relative',\n    maxWidth: '100%',\n    wordWrap: 'break-word',\n  },\n  EditIcon: {\n    position: 'absolute',\n    right: '50px',\n    bottom: '5px',\n    opacity: '0.5'\n  },\n  DeleteIcon: {\n    position: 'absolute',\n    right: '5px',\n    bottom: '5px',\n    opacity: '0.5'\n  },\n  CompleteIcon: {\n    position: 'absolute',\n    right: '95px',\n    bottom: '5px',\n    color: 'red'\n  },\n  Content: {\n    marginTop: 'auto',\n    marginBottom: 'auto',\n  },\n  CompletedContent: {\n    marginTop: 'auto',\n    marginBottom: 'auto',\n    textDecoration: 'line-through'\n  },\n  EditForm: {\n    resize: 'none',\n    maxWidth: '100%',\n    overflow: 'hidden',\n    outline: 'none',\n    border: 'none'\n  },\n  EditFormContainer: {\n    width: '100%',\n    marginBottom: '5px'\n  },\n  EditFormCard: {\n    minHeight: '50px',\n    padding: '6px 8px 2px'\n  },\n  SaveButton: {\n    margin: '10px 0 10px'\n  }\n});\n\nconst Todo = ({todoID,content,completed,dispatch}) => {\n  const classes = useStyles();\n  const [isEditing,setIsEditing] = useState(false);\n  const [todoText,setText] = useState(content);\n\n  const handleDeleteTodo = () => {\n    dispatch(deleteTodo(todoID,completed));\n  }\n\n  const handleSetCompleted = () => {\n    dispatch(setComplete(todoID,!completed));\n  }\n\n  const handleUserInput = (e) => {\n    setText(e.target.value);\n  }\n\n  const handleEditTodo = () => {\n    setIsEditing(false);\n    dispatch(editTodo(todoID,completed,todoText));\n  }\n\n  const RenderEdit = () => {\n    return (\n      <div className={classes.EditFormContainer}>\n        <Card className={classes.EditFormCard} >\n            <TextareaAutosize aria-label=\"minimum height\" className={classes.EditForm}\n            rowsMin={1}\n            value={todoText}\n            autoFocus\n            onChange={handleUserInput}\n            onBlur={()=>setIsEditing(false)}/>\n        </Card>\n        <Button variant=\"outlined\" color=\"secondary\" onMouseDown={handleEditTodo} className={classes.SaveButton} >\n          Save\n        </Button>\n      </div>\n    )\n  }\n\n  const RenderTodo = () => {\n    return (\n        <div className={classes.cardContainer}>\n          <Card>\n            <CardContent>\n              <IconButton aria-label=\"delete\" className={classes.EditIcon} onClick={()=>setIsEditing(true)}>\n                <EditIcon />\n              </IconButton>\n              <IconButton aria-label=\"delete\" onClick={handleDeleteTodo} className={classes.DeleteIcon}>\n                <DeleteIcon />\n              </IconButton>\n              {\n                completed ?\n                (<IconButton aria-label=\"delete\" onClick={handleSetCompleted} className={classes.CompleteIcon}>\n                  <CheckCircleRoundedIcon />\n                </IconButton>)\n                :\n                (<IconButton aria-label=\"delete\" onClick={handleSetCompleted} className={classes.CompleteIcon}>\n                  <CheckCircleOutlineRoundedIcon />\n                </IconButton>\n              )}\n              <Typography  gutterBottom className={completed ? classes.CompletedContent : classes.Content}>\n                {content}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n    )\n  }\n\n  return isEditing ? RenderEdit() : RenderTodo();\n\n}\nexport default connect()(Todo);\n","export const simpleAction = () => dispatch => {\n dispatch({\n  type: 'SIMPLE_ACTION',\n  payload: 'result_of_simple_action'\n })\n}\n\nexport const addTodo = (content) => {\n  return {\n    type:'ADD_TODO',\n    payload:content,\n  }\n}\n\nexport const deleteTodo = (todoID,completed) => dispatch => {\n  dispatch({\n    type: 'DELETE_TODO',\n    payload: {todoID,completed}\n  })\n}\n\nexport const setComplete = (todoID,newCompleteStatus) => dispatch => {\n  dispatch({\n    type: 'SET_COMPLETE',\n    payload: {todoID,newCompleteStatus}\n  })\n}\n\nexport const editTodo = (todoID,completeStatus,newContent) => dispatch => {\n  dispatch({\n    type: 'EDIT_TODO',\n    payload: {todoID,completeStatus,newContent}\n  })\n}\n","import React, { Component, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport AddIcon from '@material-ui/icons/Add';\nimport Fab from '@material-ui/core/Fab';\nimport {addTodo} from '../actions/action';\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1),\n  }\n}));\n\nconst AddTodoForm = ({dispatch}) => {\n  const classes = useStyles();\n  const [todoContent,setTodoContent] = useState(\"\");\n  const handleUserInput = (e) => {\n    setTodoContent(e.target.value);\n  }\n  const writeTodo = () =>\n  {\n    if(todoContent) {\n      dispatch(addTodo(todoContent));\n      setTodoContent(\"\");\n    }\n  }\n  return (\n      <div>\n        <TextField id=\"filled-basic\" placeholder=\"Write a new note...\" value={todoContent} onChange={handleUserInput} />\n        <Fab size=\"medium\" color=\"secondary\" aria-label=\"add\" className={classes.margin} onClick={writeTodo}>\n          <AddIcon />\n        </Fab>\n      </div>\n  );\n}\nexport default connect()(AddTodoForm);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { simpleAction } from '../actions/action';\nimport Todo from './Todo';\nimport AddTodoForm from './AddTodoForm';\nimport { makeStyles } from '@material-ui/core/styles';\nimport '../App.css';\n\n\nclass App extends Component {\n\n  action = (event) => {\n    this.props.simpleAction();\n  }\n\n  render() {\n    const {notCompleted,completed,userId} = this.props;\n    console.log(userId)\n    return (\n      <div>\n        <div className=\"App\">\n          <header className=\"header\">\n            <h1 className=\"App-title\">Todo list</h1>\n          </header>\n          <AddTodoForm/>\n          <div className=\"todos-body\">\n            <div className=\"todos-container\">\n              {notCompleted.map((todo,index) =>\n                <Todo todoID={todo.id} key={todo.id} content={todo.content} completed={false}/>\n              )}\n            </div>\n            <div className=\"divider\">\n            </div>\n            <div className=\"todos-container\">\n              {completed.map((todo,index) =>\n                <Todo todoID={todo.id} key={todo.id} content={todo.content} completed={true}/>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n/*\n * mapDispatchToProps\n*/\nconst mapDispatchToProps = dispatch => ({\n  simpleAction: () => dispatch(simpleAction())\n})\n\n/*\n * mapStateToProps\n*/\nconst mapStateToProps = state => ({\n  notCompleted: state.reducer.notCompleted,\n  completed: state.reducer.completed,\n  userId:state.userId\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport './index.css';\nimport App from './components/App';\nimport {store} from './store';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n <Provider store={store}>\n  <App />\n </Provider>,\n document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}